"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupServer = void 0;
require("reflect-metadata");
const core_1 = require("@aries-framework/core");
const body_parser_1 = __importDefault(require("body-parser"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const swagger_ui_express_1 = require("swagger-ui-express");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const BasicMessageEvents_1 = require("./events/BasicMessageEvents");
const ConnectionEvents_1 = require("./events/ConnectionEvents");
const CredentialEvents_1 = require("./events/CredentialEvents");
const ProofEvents_1 = require("./events/ProofEvents");
const routes_1 = require("./routes/routes");
const setupServer = async (agent, config) => {
    var _a;
    tsyringe_1.container.registerInstance(core_1.Agent, agent);
    const app = (_a = config.app) !== null && _a !== void 0 ? _a : (0, express_1.default)();
    if (config.cors)
        app.use((0, cors_1.default)());
    if (config.socketServer || config.webhookUrl) {
        (0, BasicMessageEvents_1.basicMessageEvents)(agent, config);
        (0, ConnectionEvents_1.connectionEvents)(agent, config);
        (0, CredentialEvents_1.credentialEvents)(agent, config);
        (0, ProofEvents_1.proofEvents)(agent, config);
    }
    // Use body parser to read sent json payloads
    app.use(body_parser_1.default.urlencoded({
        extended: true,
    }));
    app.use(body_parser_1.default.json());
    app.use('/docs', swagger_ui_express_1.serve, async (_req, res) => {
        return res.send((0, swagger_ui_express_1.generateHTML)(await Promise.resolve().then(() => __importStar(require('./routes/swagger.json')))));
    });
    (0, routes_1.RegisterRoutes)(app);
    app.use((req, res, next) => {
        if (req.url == '/') {
            res.redirect('/docs');
            return;
        }
        next();
    });
    app.use(function errorHandler(err, req, res, next) {
        if (err instanceof tsoa_1.ValidateError) {
            agent.config.logger.warn(`Caught Validation Error for ${req.path}:`, err.fields);
            return res.status(422).json({
                message: 'Validation Failed',
                details: err === null || err === void 0 ? void 0 : err.fields,
            });
        }
        if (err instanceof Error) {
            const exceptionError = err;
            if (exceptionError.status === 400) {
                return res.status(400).json({
                    message: `Bad Request`,
                    details: err.message,
                });
            }
            agent.config.logger.error('Internal Server Error.', err);
            return res.status(500).json({
                message: 'Internal Server Error. Check server logging.',
            });
        }
        next();
    });
    app.use(function notFoundHandler(_req, res) {
        res.status(404).send({
            message: 'Not Found',
        });
    });
    return app;
};
exports.setupServer = setupServer;
//# sourceMappingURL=server.js.map