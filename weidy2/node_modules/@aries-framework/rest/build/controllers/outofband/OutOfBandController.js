"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutOfBandController = void 0;
const core_1 = require("@aries-framework/core");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let OutOfBandController = class OutOfBandController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve all out of band records
     * @param invitationId invitation identifier
     * @returns OutOfBandRecord[]
     */
    async getAllOutOfBandRecords(invitationId) {
        let outOfBandRecords = await this.agent.oob.getAll();
        if (invitationId)
            outOfBandRecords = outOfBandRecords.filter((o) => o.outOfBandInvitation.id === invitationId);
        return outOfBandRecords.map((c) => c.toJSON());
    }
    /**
     * Retrieve an out of band record by id
     * @param recordId record identifier
     * @returns OutOfBandRecord
     */
    async getOutOfBandRecordById(outOfBandId, notFoundError) {
        const outOfBandRecord = await this.agent.oob.findById(outOfBandId);
        if (!outOfBandRecord)
            return notFoundError(404, { reason: `Out of band record with id "${outOfBandId}" not found.` });
        return outOfBandRecord.toJSON();
    }
    /**
     * Creates an outbound out-of-band record containing out-of-band invitation message defined in
     * Aries RFC 0434: Out-of-Band Protocol 1.1.
     * @param config configuration of how out-of-band invitation should be created
     * @returns Out of band record
     */
    async createInvitation(internalServerError, config // props removed because of issues with serialization
    ) {
        try {
            const outOfBandRecord = await this.agent.oob.createInvitation(config);
            return {
                invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({
                    domain: this.agent.config.endpoints[0],
                }),
                invitation: outOfBandRecord.outOfBandInvitation.toJSON({
                    useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix,
                }),
                outOfBandRecord: outOfBandRecord.toJSON(),
            };
        }
        catch (error) {
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates an outbound out-of-band record in the same way how `createInvitation` method does it,
     * but it also converts out-of-band invitation message to an "legacy" invitation message defined
     * in RFC 0160: Connection Protocol and returns it together with out-of-band record.
     *
     * @param config configuration of how a invitation should be created
     * @returns out-of-band record and invitation
     */
    async createLegacyInvitation(internalServerError, config // routing prop removed because of issues with public key serialization
    ) {
        try {
            const { outOfBandRecord, invitation } = await this.agent.oob.createLegacyInvitation(config);
            return {
                invitationUrl: invitation.toUrl({
                    domain: this.agent.config.endpoints[0],
                    useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix,
                }),
                invitation: invitation.toJSON({
                    useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix,
                }),
                outOfBandRecord: outOfBandRecord.toJSON(),
            };
        }
        catch (error) {
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates a new connectionless legacy invitation.
     *
     * @param config configuration of how a connection invitation should be created
     * @returns a message and a invitationUrl
     */
    async createLegacyConnectionlessInvitation(config, notFoundError, internalServerError) {
        try {
            const agentMessage = core_1.JsonTransformer.fromJSON(config.message, core_1.AgentMessage);
            return await this.agent.oob.createLegacyConnectionlessInvitation(Object.assign(Object.assign({}, config), { message: agentMessage }));
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, { reason: `connection with connection id "${config.recordId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates inbound out-of-band record and assigns out-of-band invitation message to it if the
     * message is valid.
     *
     * @param invitation either OutOfBandInvitation or ConnectionInvitationMessage
     * @param config config for handling of invitation
     * @returns out-of-band record and connection record if one has been created.
     */
    async receiveInvitation(invitationRequest, internalServerError) {
        const { invitation } = invitationRequest, config = __rest(invitationRequest, ["invitation"]);
        try {
            const invite = new core_1.OutOfBandInvitation(Object.assign(Object.assign({}, invitation), { handshakeProtocols: invitation.handshake_protocols }));
            const { outOfBandRecord, connectionRecord } = await this.agent.oob.receiveInvitation(invite, config);
            return {
                outOfBandRecord: outOfBandRecord.toJSON(),
                connectionRecord: connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.toJSON(),
            };
        }
        catch (error) {
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates inbound out-of-band record and assigns out-of-band invitation message to it if the
     * message is valid.
     *
     * @param invitationUrl invitation url
     * @param config config for handling of invitation
     * @returns out-of-band record and connection record if one has been created.
     */
    async receiveInvitationFromUrl(invitationRequest, internalServerError) {
        const { invitationUrl } = invitationRequest, config = __rest(invitationRequest, ["invitationUrl"]);
        try {
            const { outOfBandRecord, connectionRecord } = await this.agent.oob.receiveInvitationFromUrl(invitationUrl, config);
            return {
                outOfBandRecord: outOfBandRecord.toJSON(),
                connectionRecord: connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.toJSON(),
            };
        }
        catch (error) {
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.
     * This is not needed when auto accepting of connections is enabled.
     */
    async acceptInvitation(outOfBandId, acceptInvitationConfig, notFoundError, internalServerError) {
        try {
            const { outOfBandRecord, connectionRecord } = await this.agent.oob.acceptInvitation(outOfBandId, acceptInvitationConfig);
            return {
                outOfBandRecord: outOfBandRecord.toJSON(),
                connectionRecord: connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.toJSON(),
            };
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `mediator with mediatorId ${acceptInvitationConfig === null || acceptInvitationConfig === void 0 ? void 0 : acceptInvitationConfig.mediatorId} not found`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Deletes an out of band record from the repository.
     *
     * @param outOfBandId Record identifier
     */
    async deleteOutOfBandRecord(outOfBandId, notFoundError, internalServerError) {
        try {
            this.setStatus(204);
            await this.agent.oob.deleteById(outOfBandId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, { reason: `Out of band record with id "${outOfBandId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)([examples_1.outOfBandRecordExample]),
    (0, tsoa_1.Get)(),
    __param(0, (0, tsoa_1.Query)('invitationId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "getAllOutOfBandRecords", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.outOfBandRecordExample),
    (0, tsoa_1.Get)('/:outOfBandId'),
    __param(0, (0, tsoa_1.Path)('outOfBandId')),
    __param(1, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "getOutOfBandRecordById", null);
__decorate([
    (0, tsoa_1.Example)({
        invitationUrl: 'string',
        invitation: examples_1.outOfBandInvitationExample,
        outOfBandRecord: examples_1.outOfBandRecordExample,
    }),
    (0, tsoa_1.Post)('/create-invitation'),
    __param(0, (0, tsoa_1.Res)()),
    __param(1, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function, Object]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "createInvitation", null);
__decorate([
    (0, tsoa_1.Example)({
        invitation: examples_1.outOfBandInvitationExample,
        outOfBandRecord: examples_1.outOfBandRecordExample,
    }),
    (0, tsoa_1.Post)('/create-legacy-invitation'),
    __param(0, (0, tsoa_1.Res)()),
    __param(1, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function, Object]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "createLegacyInvitation", null);
__decorate([
    (0, tsoa_1.Example)({
        message: {
            '@id': 'eac4ff4e-b4fb-4c1d-aef3-b29c89d1cc00',
            '@type': 'https://didcomm.org/connections/1.0/invitation',
        },
        invitationUrl: 'http://example.com/invitation_url',
    }),
    (0, tsoa_1.Post)('/create-legacy-connectionless-invitation'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "createLegacyConnectionlessInvitation", null);
__decorate([
    (0, tsoa_1.Example)({
        outOfBandRecord: examples_1.outOfBandRecordExample,
        connectionRecord: examples_1.ConnectionRecordExample,
    }),
    (0, tsoa_1.Post)('/receive-invitation'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "receiveInvitation", null);
__decorate([
    (0, tsoa_1.Example)({
        outOfBandRecord: examples_1.outOfBandRecordExample,
        connectionRecord: examples_1.ConnectionRecordExample,
    }),
    (0, tsoa_1.Post)('/receive-invitation-url'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "receiveInvitationFromUrl", null);
__decorate([
    (0, tsoa_1.Example)({
        outOfBandRecord: examples_1.outOfBandRecordExample,
        connectionRecord: examples_1.ConnectionRecordExample,
    }),
    (0, tsoa_1.Post)('/:outOfBandId/accept-invitation'),
    __param(0, (0, tsoa_1.Path)('outOfBandId')),
    __param(1, (0, tsoa_1.Body)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Function, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "acceptInvitation", null);
__decorate([
    (0, tsoa_1.Delete)('/:outOfBandId'),
    __param(0, (0, tsoa_1.Path)('outOfBandId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], OutOfBandController.prototype, "deleteOutOfBandRecord", null);
OutOfBandController = __decorate([
    (0, tsoa_1.Tags)('Out Of Band'),
    (0, tsoa_1.Route)('/oob'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], OutOfBandController);
exports.OutOfBandController = OutOfBandController;
//# sourceMappingURL=OutOfBandController.js.map