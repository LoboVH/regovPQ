import type { AgentMessageType } from '../types';
import type { CreateOutOfBandInvitationConfig, CreateLegacyInvitationConfig } from '@aries-framework/core';
import { Agent } from '@aries-framework/core';
import { Controller, TsoaResponse } from 'tsoa';
import { RecordId } from '../examples';
import { AcceptInvitationConfig, ReceiveInvitationByUrlProps, ReceiveInvitationProps } from '../types';
export declare class OutOfBandController extends Controller {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve all out of band records
     * @param invitationId invitation identifier
     * @returns OutOfBandRecord[]
     */
    getAllOutOfBandRecords(invitationId?: RecordId): Promise<Record<string, unknown>[]>;
    /**
     * Retrieve an out of band record by id
     * @param recordId record identifier
     * @returns OutOfBandRecord
     */
    getOutOfBandRecordById(outOfBandId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>): Promise<any>;
    /**
     * Creates an outbound out-of-band record containing out-of-band invitation message defined in
     * Aries RFC 0434: Out-of-Band Protocol 1.1.
     * @param config configuration of how out-of-band invitation should be created
     * @returns Out of band record
     */
    createInvitation(internalServerError: TsoaResponse<500, {
        message: string;
    }>, config?: Omit<CreateOutOfBandInvitationConfig, 'routing' | 'appendedAttachments' | 'messages'>): Promise<any>;
    /**
     * Creates an outbound out-of-band record in the same way how `createInvitation` method does it,
     * but it also converts out-of-band invitation message to an "legacy" invitation message defined
     * in RFC 0160: Connection Protocol and returns it together with out-of-band record.
     *
     * @param config configuration of how a invitation should be created
     * @returns out-of-band record and invitation
     */
    createLegacyInvitation(internalServerError: TsoaResponse<500, {
        message: string;
    }>, config?: Omit<CreateLegacyInvitationConfig, 'routing'>): Promise<any>;
    /**
     * Creates a new connectionless legacy invitation.
     *
     * @param config configuration of how a connection invitation should be created
     * @returns a message and a invitationUrl
     */
    createLegacyConnectionlessInvitation(config: {
        recordId: string;
        message: AgentMessageType;
        domain: string;
    }, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Creates inbound out-of-band record and assigns out-of-band invitation message to it if the
     * message is valid.
     *
     * @param invitation either OutOfBandInvitation or ConnectionInvitationMessage
     * @param config config for handling of invitation
     * @returns out-of-band record and connection record if one has been created.
     */
    receiveInvitation(invitationRequest: ReceiveInvitationProps, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Creates inbound out-of-band record and assigns out-of-band invitation message to it if the
     * message is valid.
     *
     * @param invitationUrl invitation url
     * @param config config for handling of invitation
     * @returns out-of-band record and connection record if one has been created.
     */
    receiveInvitationFromUrl(invitationRequest: ReceiveInvitationByUrlProps, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.
     * This is not needed when auto accepting of connections is enabled.
     */
    acceptInvitation(outOfBandId: RecordId, acceptInvitationConfig: AcceptInvitationConfig, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Deletes an out of band record from the repository.
     *
     * @param outOfBandId Record identifier
     */
    deleteOutOfBandRecord(outOfBandId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
}
