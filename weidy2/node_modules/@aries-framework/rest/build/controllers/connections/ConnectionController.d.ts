import { DidExchangeState, Agent } from '@aries-framework/core';
import { Controller, TsoaResponse } from 'tsoa';
import { RecordId } from '../examples';
export declare class ConnectionController extends Controller {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve all connections records
     * @param alias Alias
     * @param state Connection state
     * @param myDid My DID
     * @param theirDid Their DID
     * @param theirLabel Their label
     * @returns ConnectionRecord[]
     */
    getAllConnections(outOfBandId?: string, alias?: string, state?: DidExchangeState, myDid?: string, theirDid?: string, theirLabel?: string): Promise<Record<string, unknown>[]>;
    /**
     * Retrieve connection record by connection id
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    getConnectionById(connectionId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>): Promise<any>;
    /**
     * Deletes a connection record from the connection repository.
     *
     * @param connectionId Connection identifier
     */
    deleteConnection(connectionId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a connection request as inviter by sending a connection response message
     * for the connection with the specified connection id.
     *
     * This is not needed when auto accepting of connection is enabled.
     *
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    acceptRequest(connectionId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a connection response as invitee by sending a trust ping message
     * for the connection with the specified connection id.
     *
     * This is not needed when auto accepting of connection is enabled.
     *
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    acceptResponse(connectionId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
}
