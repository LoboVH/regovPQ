"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionController = void 0;
const core_1 = require("@aries-framework/core");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let ConnectionController = class ConnectionController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve all connections records
     * @param alias Alias
     * @param state Connection state
     * @param myDid My DID
     * @param theirDid Their DID
     * @param theirLabel Their label
     * @returns ConnectionRecord[]
     */
    async getAllConnections(outOfBandId, alias, state, myDid, theirDid, theirLabel) {
        let connections;
        if (outOfBandId) {
            connections = await this.agent.connections.findAllByOutOfBandId(outOfBandId);
        }
        else {
            const connectionRepository = this.agent.dependencyManager.resolve(core_1.ConnectionRepository);
            const connections = await connectionRepository.findByQuery({
                alias,
                myDid,
                theirDid,
                theirLabel,
                state,
            });
            return connections.map((c) => c.toJSON());
        }
        // if (alias) connections = connections.filter((c) => c.alias === alias)
        // if (state) connections = connections.filter((c) => c.state === state)
        // if (myDid) connections = connections.filter((c) => c.did === myDid)
        // if (theirDid) connections = connections.filter((c) => c.theirDid === theirDid)
        // if (theirLabel) connections = connections.filter((c) => c.theirLabel === theirLabel)
        return connections.map((c) => c.toJSON());
    }
    /**
     * Retrieve connection record by connection id
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    async getConnectionById(connectionId, notFoundError) {
        const connection = await this.agent.connections.findById(connectionId);
        if (!connection)
            return notFoundError(404, { reason: `connection with connection id "${connectionId}" not found.` });
        return connection.toJSON();
    }
    /**
     * Deletes a connection record from the connection repository.
     *
     * @param connectionId Connection identifier
     */
    async deleteConnection(connectionId, notFoundError, internalServerError) {
        try {
            this.setStatus(204);
            await this.agent.connections.deleteById(connectionId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, { reason: `connection with connection id "${connectionId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a connection request as inviter by sending a connection response message
     * for the connection with the specified connection id.
     *
     * This is not needed when auto accepting of connection is enabled.
     *
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    async acceptRequest(connectionId, notFoundError, internalServerError) {
        try {
            const connection = await this.agent.connections.acceptRequest(connectionId);
            return connection.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.AriesFrameworkError) {
                return notFoundError(404, { reason: `connection with connection id "${connectionId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a connection response as invitee by sending a trust ping message
     * for the connection with the specified connection id.
     *
     * This is not needed when auto accepting of connection is enabled.
     *
     * @param connectionId Connection identifier
     * @returns ConnectionRecord
     */
    async acceptResponse(connectionId, notFoundError, internalServerError) {
        try {
            const connection = await this.agent.connections.acceptResponse(connectionId);
            return connection.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, { reason: `connection with connection id "${connectionId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)([examples_1.ConnectionRecordExample]),
    (0, tsoa_1.Get)('/'),
    __param(0, (0, tsoa_1.Query)('outOfBandId')),
    __param(1, (0, tsoa_1.Query)('alias')),
    __param(2, (0, tsoa_1.Query)('state')),
    __param(3, (0, tsoa_1.Query)('myDid')),
    __param(4, (0, tsoa_1.Query)('theirDid')),
    __param(5, (0, tsoa_1.Query)('theirLabel')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String, String, String, String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "getAllConnections", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.ConnectionRecordExample),
    (0, tsoa_1.Get)('/:connectionId'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __param(1, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "getConnectionById", null);
__decorate([
    (0, tsoa_1.Delete)('/:connectionId'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "deleteConnection", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.ConnectionRecordExample),
    (0, tsoa_1.Post)('/:connectionId/accept-request'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "acceptRequest", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.ConnectionRecordExample),
    (0, tsoa_1.Post)('/:connectionId/accept-response'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "acceptResponse", null);
ConnectionController = __decorate([
    (0, tsoa_1.Tags)('Connections'),
    (0, tsoa_1.Route)('/connections'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], ConnectionController);
exports.ConnectionController = ConnectionController;
//# sourceMappingURL=ConnectionController.js.map