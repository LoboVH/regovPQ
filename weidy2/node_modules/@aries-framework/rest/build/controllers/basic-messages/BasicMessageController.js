"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicMessageController = void 0;
const core_1 = require("@aries-framework/core");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let BasicMessageController = class BasicMessageController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve basic messages by connection id
     *
     * @param connectionId Connection identifier
     * @returns BasicMessageRecord[]
     */
    async getBasicMessages(connectionId) {
        return await this.agent.basicMessages.findAllByQuery({ connectionId });
    }
    /**
     * Send a basic message to a connection
     *
     * @param connectionId Connection identifier
     * @param content The content of the message
     */
    async sendMessage(connectionId, request, notFoundError, internalServerError) {
        try {
            this.setStatus(204);
            await this.agent.basicMessages.sendMessage(connectionId, request.content);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, { reason: `connection with connection id "${connectionId}" not found.` });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)([examples_1.BasicMessageRecordExample]),
    (0, tsoa_1.Get)('/:connectionId'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BasicMessageController.prototype, "getBasicMessages", null);
__decorate([
    (0, tsoa_1.Post)('/:connectionId'),
    __param(0, (0, tsoa_1.Path)('connectionId')),
    __param(1, (0, tsoa_1.Body)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Function, Function]),
    __metadata("design:returntype", Promise)
], BasicMessageController.prototype, "sendMessage", null);
BasicMessageController = __decorate([
    (0, tsoa_1.Tags)('Basic Messages'),
    (0, tsoa_1.Route)('/basic-messages'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], BasicMessageController);
exports.BasicMessageController = BasicMessageController;
//# sourceMappingURL=BasicMessageController.js.map