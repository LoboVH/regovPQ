"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaController = void 0;
const core_1 = require("@aries-framework/core");
const LedgerError_1 = require("@aries-framework/core/build/modules/ledger/error/LedgerError");
const indyError_1 = require("@aries-framework/core/build/utils/indyError");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let SchemaController = class SchemaController {
    constructor(agent) {
        this.agent = agent;
    }
    /**
     * Retrieve schema by schema id
     *
     * @param schemaId
     * @returns Schema
     */
    async getSchemaById(schemaId, notFoundError, forbiddenError, badRequestError, internalServerError) {
        try {
            return await this.agent.ledger.getSchema(schemaId);
        }
        catch (error) {
            if (error instanceof core_1.IndySdkError && error.message === 'IndyError(LedgerNotFound): LedgerNotFound') {
                return notFoundError(404, {
                    reason: `schema definition with schemaId "${schemaId}" not found.`,
                });
            }
            else if (error instanceof LedgerError_1.LedgerError && error.cause instanceof core_1.IndySdkError) {
                if ((0, indyError_1.isIndyError)(error.cause.cause, 'LedgerInvalidTransaction')) {
                    return forbiddenError(403, {
                        reason: `schema definition with schemaId "${schemaId}" can not be returned.`,
                    });
                }
                if ((0, indyError_1.isIndyError)(error.cause.cause, 'CommonInvalidStructure')) {
                    return badRequestError(400, {
                        reason: `schemaId "${schemaId}" has invalid structure.`,
                    });
                }
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates a new schema and registers schema on ledger
     *
     * @param schema
     * @returns schema
     */
    async createSchema(schema, forbiddenError, internalServerError) {
        try {
            return await this.agent.ledger.registerSchema({
                name: schema.name,
                version: schema.version,
                attributes: schema.attributes,
            });
        }
        catch (error) {
            if (error instanceof core_1.AriesFrameworkError) {
                if (error.message.includes('UnauthorizedClientRequest')) {
                    return forbiddenError(400, {
                        reason: 'this action is not allowed.',
                    });
                }
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)(examples_1.SchemaExample),
    (0, tsoa_1.Get)('/:schemaId'),
    __param(0, (0, tsoa_1.Path)('schemaId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __param(4, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function, Function, Function]),
    __metadata("design:returntype", Promise)
], SchemaController.prototype, "getSchemaById", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.SchemaExample),
    (0, tsoa_1.Post)('/'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], SchemaController.prototype, "createSchema", null);
SchemaController = __decorate([
    (0, tsoa_1.Tags)('Schemas'),
    (0, tsoa_1.Route)('/schemas'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], SchemaController);
exports.SchemaController = SchemaController;
//# sourceMappingURL=SchemaController.js.map