"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialDefinitionController = void 0;
const core_1 = require("@aries-framework/core");
const LedgerError_1 = require("@aries-framework/core/build/modules/ledger/error/LedgerError");
const LedgerNotFoundError_1 = require("@aries-framework/core/build/modules/ledger/error/LedgerNotFoundError");
const indyError_1 = require("@aries-framework/core/build/utils/indyError");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let CredentialDefinitionController = class CredentialDefinitionController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve credential definition by credential definition id
     *
     * @param credentialDefinitionId
     * @returns CredDef
     */
    async getCredentialDefinitionById(credentialDefinitionId, badRequestError, notFoundError, internalServerError) {
        try {
            return await this.agent.ledger.getCredentialDefinition(credentialDefinitionId);
        }
        catch (error) {
            if (error instanceof core_1.IndySdkError && error.message === 'IndyError(LedgerNotFound): LedgerNotFound') {
                return notFoundError(404, {
                    reason: `credential definition with credentialDefinitionId "${credentialDefinitionId}" not found.`,
                });
            }
            else if (error instanceof LedgerError_1.LedgerError && error.cause instanceof core_1.IndySdkError) {
                if ((0, indyError_1.isIndyError)(error.cause.cause, 'CommonInvalidStructure')) {
                    return badRequestError(400, {
                        reason: `credentialDefinitionId "${credentialDefinitionId}" has invalid structure.`,
                    });
                }
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates a new credential definition.
     *
     * @param credentialDefinitionRequest
     * @returns CredDef
     */
    async createCredentialDefinition(credentialDefinitionRequest, notFoundError, internalServerError) {
        try {
            const schema = await this.agent.ledger.getSchema(credentialDefinitionRequest.schemaId);
            return await this.agent.ledger.registerCredentialDefinition({
                schema,
                supportRevocation: credentialDefinitionRequest.supportRevocation,
                tag: credentialDefinitionRequest.tag,
            });
        }
        catch (error) {
            if (error instanceof LedgerNotFoundError_1.LedgerNotFoundError) {
                return notFoundError(404, {
                    reason: `schema with schemaId "${credentialDefinitionRequest.schemaId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialDefinitionExample),
    (0, tsoa_1.Get)('/:credentialDefinitionId'),
    __param(0, (0, tsoa_1.Path)('credentialDefinitionId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialDefinitionController.prototype, "getCredentialDefinitionById", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialDefinitionExample),
    (0, tsoa_1.Post)('/'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialDefinitionController.prototype, "createCredentialDefinition", null);
CredentialDefinitionController = __decorate([
    (0, tsoa_1.Tags)('Credential Definitions'),
    (0, tsoa_1.Route)('/credential-definitions'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], CredentialDefinitionController);
exports.CredentialDefinitionController = CredentialDefinitionController;
//# sourceMappingURL=CredentialDefinitionController.js.map