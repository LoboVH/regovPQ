import { CredentialState, Agent } from '@aries-framework/core';
import { Controller, TsoaResponse } from 'tsoa';
import { RecordId } from '../examples';
import { AcceptCredentialRequestOptions, OfferCredentialOptions, ProposeCredentialOptions, AcceptCredentialProposalOptions, AcceptCredentialOfferOptions, CreateOfferOptions } from '../types';
export declare class CredentialController extends Controller {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve all credential exchange records
     *
     * @returns CredentialExchangeRecord[]
     */
    getAllCredentials(threadId?: string, connectionId?: string, state?: CredentialState): Promise<Record<string, unknown>[]>;
    /**
     * Retrieve credential exchange record by credential record id
     *
     * @param credentialRecordId
     * @returns CredentialExchangeRecord
     */
    getCredentialById(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Deletes a credential exchange record in the credential repository.
     *
     * @param credentialRecordId
     */
    deleteCredential(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Initiate a new credential exchange as holder by sending a propose credential message
     * to the connection with a specified connection id.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    proposeCredential(options: ProposeCredentialOptions, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a credential proposal as issuer by sending an accept proposal message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    acceptProposal(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>, options?: AcceptCredentialProposalOptions): Promise<any>;
    /**
     * Initiate a new credential exchange as issuer by creating a credential offer
     * without specifying a connection id
     *
     * @param options
     * @returns AgentMessage, CredentialExchangeRecord
     */
    createOffer(options: CreateOfferOptions, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Initiate a new credential exchange as issuer by sending a offer credential message
     * to the connection with the specified connection id.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    offerCredential(options: OfferCredentialOptions, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a credential offer as holder by sending an accept offer message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    acceptOffer(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>, options?: AcceptCredentialOfferOptions): Promise<any>;
    /**
     * Accept a credential request as issuer by sending an accept request message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    acceptRequest(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>, options?: AcceptCredentialRequestOptions): Promise<any>;
    /**
     * Accept a credential as holder by sending an accept credential message
     * to the connection associated with the credential exchange record.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    acceptCredential(credentialRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
}
