"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialController = void 0;
const core_1 = require("@aries-framework/core");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let CredentialController = class CredentialController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve all credential exchange records
     *
     * @returns CredentialExchangeRecord[]
     */
    async getAllCredentials(threadId, connectionId, state) {
        const credentialRepository = this.agent.dependencyManager.resolve(core_1.CredentialRepository);
        const credentials = await credentialRepository.findByQuery({
            connectionId,
            threadId,
            state,
        });
        return credentials.map((c) => c.toJSON());
    }
    /**
     * Retrieve credential exchange record by credential record id
     *
     * @param credentialRecordId
     * @returns CredentialExchangeRecord
     */
    async getCredentialById(credentialRecordId, notFoundError, internalServerError) {
        try {
            const credential = await this.agent.credentials.getById(credentialRecordId);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Deletes a credential exchange record in the credential repository.
     *
     * @param credentialRecordId
     */
    async deleteCredential(credentialRecordId, notFoundError, internalServerError) {
        try {
            this.setStatus(204);
            await this.agent.credentials.deleteById(credentialRecordId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Initiate a new credential exchange as holder by sending a propose credential message
     * to the connection with a specified connection id.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    async proposeCredential(options, notFoundError, internalServerError) {
        try {
            const credential = await this.agent.credentials.proposeCredential(options);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `connection with connection record id "${options.connectionId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a credential proposal as issuer by sending an accept proposal message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    async acceptProposal(credentialRecordId, notFoundError, internalServerError, options) {
        try {
            const credential = await this.agent.credentials.acceptProposal(Object.assign(Object.assign({}, options), { credentialRecordId: credentialRecordId }));
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Initiate a new credential exchange as issuer by creating a credential offer
     * without specifying a connection id
     *
     * @param options
     * @returns AgentMessage, CredentialExchangeRecord
     */
    async createOffer(options, internalServerError) {
        try {
            const offer = await this.agent.credentials.createOffer(options);
            return {
                message: offer.message.toJSON(),
                credentialRecord: offer.credentialRecord.toJSON(),
            };
        }
        catch (error) {
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Initiate a new credential exchange as issuer by sending a offer credential message
     * to the connection with the specified connection id.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    async offerCredential(options, notFoundError, internalServerError) {
        try {
            const credential = await this.agent.credentials.offerCredential(options);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `connection with connection record id "${options.connectionId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a credential offer as holder by sending an accept offer message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    async acceptOffer(credentialRecordId, notFoundError, internalServerError, options) {
        try {
            const credential = await this.agent.credentials.acceptOffer(Object.assign(Object.assign({}, options), { credentialRecordId: credentialRecordId }));
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a credential request as issuer by sending an accept request message
     * to the connection associated with the credential exchange record.
     *
     * @param credentialRecordId credential identifier
     * @param options
     * @returns CredentialExchangeRecord
     */
    async acceptRequest(credentialRecordId, notFoundError, internalServerError, options) {
        try {
            const credential = await this.agent.credentials.acceptRequest(Object.assign(Object.assign({}, options), { credentialRecordId: credentialRecordId }));
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a credential as holder by sending an accept credential message
     * to the connection associated with the credential exchange record.
     *
     * @param options
     * @returns CredentialExchangeRecord
     */
    async acceptCredential(credentialRecordId, notFoundError, internalServerError) {
        try {
            const credential = await this.agent.credentials.acceptCredential({ credentialRecordId: credentialRecordId });
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `credential with credential record id "${credentialRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)([examples_1.CredentialExchangeRecordExample]),
    (0, tsoa_1.Get)('/'),
    __param(0, (0, tsoa_1.Query)('threadId')),
    __param(1, (0, tsoa_1.Query)('connectionId')),
    __param(2, (0, tsoa_1.Query)('state')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "getAllCredentials", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Get)('/:credentialRecordId'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "getCredentialById", null);
__decorate([
    (0, tsoa_1.Delete)('/:credentialRecordId'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "deleteCredential", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/propose-credential'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "proposeCredential", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/:credentialRecordId/accept-proposal'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function, Object]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptProposal", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/create-offer'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "createOffer", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/offer-credential'),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "offerCredential", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/:credentialRecordId/accept-offer'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function, Object]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptOffer", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/:credentialRecordId/accept-request'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function, Object]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptRequest", null);
__decorate([
    (0, tsoa_1.Example)(examples_1.CredentialExchangeRecordExample),
    (0, tsoa_1.Post)('/:credentialRecordId/accept-credential'),
    __param(0, (0, tsoa_1.Path)('credentialRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptCredential", null);
CredentialController = __decorate([
    (0, tsoa_1.Tags)('Credentials'),
    (0, tsoa_1.Route)('/credentials'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], CredentialController);
exports.CredentialController = CredentialController;
//# sourceMappingURL=CredentialController.js.map