"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProofController = void 0;
const core_1 = require("@aries-framework/core");
const JsonEncoder_1 = require("@aries-framework/core/build/utils/JsonEncoder");
const tsoa_1 = require("tsoa");
const tsyringe_1 = require("tsyringe");
const examples_1 = require("../examples");
let ProofController = class ProofController extends tsoa_1.Controller {
    constructor(agent) {
        super();
        this.agent = agent;
    }
    /**
     * Retrieve all proof records
     *
     * @param threadId
     * @returns ProofRecord[]
     */
    async getAllProofs(threadId) {
        let proofs = await this.agent.proofs.getAll();
        if (threadId)
            proofs = proofs.filter((p) => p.threadId === threadId);
        return proofs.map((proof) => proof.toJSON());
    }
    /**
     * Retrieve proof record by proof record id
     *
     * @param proofRecordId
     * @returns ProofRecord
     */
    async getProofById(proofRecordId, notFoundError, internalServerError) {
        try {
            const proof = await this.agent.proofs.getById(proofRecordId);
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `proof with proofRecordId "${proofRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Deletes a proof record in the proof repository.
     *
     * @param proofRecordId
     */
    async deleteProof(proofRecordId, notFoundError, internalServerError) {
        try {
            this.setStatus(204);
            await this.agent.proofs.deleteById(proofRecordId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `proof with proofRecordId "${proofRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Initiate a new presentation exchange as prover by sending a presentation proposal request
     * to the connection with the specified connection id.
     *
     * @param proposal
     * @returns ProofRecord
     */
    async proposeProof(proposal, notFoundError, internalServerError) {
        const { attributes, predicates, connectionId } = proposal, proposalOptions = __rest(proposal, ["attributes", "predicates", "connectionId"]);
        try {
            const presentationPreview = core_1.JsonTransformer.fromJSON({ attributes, predicates }, core_1.PresentationPreview);
            const proof = await this.agent.proofs.proposeProof(connectionId, presentationPreview, proposalOptions);
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `connection with connectionId "${connectionId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a presentation proposal as verifier by sending an accept proposal message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @param proposal
     * @returns ProofRecord
     */
    async acceptProposal(proofRecordId, proposal, notFoundError, internalServerError) {
        try {
            const proof = await this.agent.proofs.acceptProposal(proofRecordId, proposal);
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `proof with proofRecordId "${proofRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Creates a presentation request not bound to any proposal or existing connection
     *
     * @param request
     * @returns ProofRequestMessageResponse
     */
    async requestProofOutOfBand(request) {
        const { proofRequestOptions } = request, requestOptions = __rest(request, ["proofRequestOptions"]);
        const proof = await this.agent.proofs.createOutOfBandRequest(proofRequestOptions, requestOptions);
        return {
            proofUrl: `${this.agent.config.endpoints[0]}/?d_m=${JsonEncoder_1.JsonEncoder.toBase64URL(proof.requestMessage.toJSON({ useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix }))}`,
            proofRecord: proof.proofRecord,
        };
    }
    /**
     * Creates a presentation request bound to existing connection
     *
     * @param request
     * @returns ProofRecord
     */
    async requestProof(request, notFoundError, internalServerError) {
        const { connectionId, proofRequestOptions } = request, config = __rest(request, ["connectionId", "proofRequestOptions"]);
        try {
            const proof = await this.agent.proofs.requestProof(connectionId, proofRequestOptions, config);
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `connection with connectionId "${connectionId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a presentation request as prover by sending an accept request message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @param request
     * @returns ProofRecord
     */
    async acceptRequest(proofRecordId, request, notFoundError, internalServerError) {
        try {
            const { filterByPresentationPreview, filterByNonRevocationRequirements, comment } = request;
            const retrievedCredentials = await this.agent.proofs.getRequestedCredentialsForProofRequest(proofRecordId, {
                filterByPresentationPreview: filterByPresentationPreview,
                filterByNonRevocationRequirements: filterByNonRevocationRequirements,
            });
            const requestedCredentials = this.agent.proofs.autoSelectCredentialsForProofRequest(retrievedCredentials);
            const proof = await this.agent.proofs.acceptRequest(proofRecordId, requestedCredentials, {
                comment,
            });
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `proof with proofRecordId "${proofRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
    /**
     * Accept a presentation as prover by sending an accept presentation message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @returns ProofRecord
     */
    async acceptPresentation(proofRecordId, notFoundError, internalServerError) {
        try {
            const proof = await this.agent.proofs.acceptPresentation(proofRecordId);
            return proof.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                return notFoundError(404, {
                    reason: `proof with proofRecordId "${proofRecordId}" not found.`,
                });
            }
            return internalServerError(500, { message: `something went wrong: ${error}` });
        }
    }
};
__decorate([
    (0, tsoa_1.Example)([examples_1.ProofRecordExample]),
    (0, tsoa_1.Get)('/'),
    __param(0, (0, tsoa_1.Query)('threadId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "getAllProofs", null);
__decorate([
    (0, tsoa_1.Get)('/:proofRecordId'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Path)('proofRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "getProofById", null);
__decorate([
    (0, tsoa_1.Delete)('/:proofRecordId'),
    __param(0, (0, tsoa_1.Path)('proofRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "deleteProof", null);
__decorate([
    (0, tsoa_1.Post)('/propose-proof'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "proposeProof", null);
__decorate([
    (0, tsoa_1.Post)('/:proofRecordId/accept-proposal'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Path)('proofRecordId')),
    __param(1, (0, tsoa_1.Body)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "acceptProposal", null);
__decorate([
    (0, tsoa_1.Post)('/request-outofband-proof'),
    (0, tsoa_1.Example)({
        proofUrl: 'https://example.com/proof-url',
        proofRecord: examples_1.ProofRecordExample,
    }),
    __param(0, (0, tsoa_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "requestProofOutOfBand", null);
__decorate([
    (0, tsoa_1.Post)('/request-proof'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Body)()),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "requestProof", null);
__decorate([
    (0, tsoa_1.Post)('/:proofRecordId/accept-request'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Path)('proofRecordId')),
    __param(1, (0, tsoa_1.Body)()),
    __param(2, (0, tsoa_1.Res)()),
    __param(3, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "acceptRequest", null);
__decorate([
    (0, tsoa_1.Post)('/:proofRecordId/accept-presentation'),
    (0, tsoa_1.Example)(examples_1.ProofRecordExample),
    __param(0, (0, tsoa_1.Path)('proofRecordId')),
    __param(1, (0, tsoa_1.Res)()),
    __param(2, (0, tsoa_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Function, Function]),
    __metadata("design:returntype", Promise)
], ProofController.prototype, "acceptPresentation", null);
ProofController = __decorate([
    (0, tsoa_1.Tags)('Proofs'),
    (0, tsoa_1.Route)('/proofs'),
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [core_1.Agent])
], ProofController);
exports.ProofController = ProofController;
//# sourceMappingURL=ProofController.js.map