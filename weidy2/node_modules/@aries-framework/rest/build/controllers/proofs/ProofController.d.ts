import { Agent } from '@aries-framework/core';
import { Controller, TsoaResponse } from 'tsoa';
import { RecordId } from '../examples';
import { RequestProofOptions, RequestProofProposalOptions } from '../types';
export declare class ProofController extends Controller {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve all proof records
     *
     * @param threadId
     * @returns ProofRecord[]
     */
    getAllProofs(threadId?: string): Promise<Record<string, unknown>[]>;
    /**
     * Retrieve proof record by proof record id
     *
     * @param proofRecordId
     * @returns ProofRecord
     */
    getProofById(proofRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Deletes a proof record in the proof repository.
     *
     * @param proofRecordId
     */
    deleteProof(proofRecordId: RecordId, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Initiate a new presentation exchange as prover by sending a presentation proposal request
     * to the connection with the specified connection id.
     *
     * @param proposal
     * @returns ProofRecord
     */
    proposeProof(proposal: RequestProofProposalOptions, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a presentation proposal as verifier by sending an accept proposal message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @param proposal
     * @returns ProofRecord
     */
    acceptProposal(proofRecordId: string, proposal: {
        request: {
            name?: string;
            version?: string;
            nonce?: string;
        };
        comment?: string;
    }, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Creates a presentation request not bound to any proposal or existing connection
     *
     * @param request
     * @returns ProofRequestMessageResponse
     */
    requestProofOutOfBand(request: Omit<RequestProofOptions, 'connectionId'>): Promise<{
        proofUrl: string;
        proofRecord: import("@aries-framework/core").ProofRecord;
    }>;
    /**
     * Creates a presentation request bound to existing connection
     *
     * @param request
     * @returns ProofRecord
     */
    requestProof(request: RequestProofOptions, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a presentation request as prover by sending an accept request message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @param request
     * @returns ProofRecord
     */
    acceptRequest(proofRecordId: string, request: {
        filterByPresentationPreview?: boolean;
        filterByNonRevocationRequirements?: boolean;
        comment?: string;
    }, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
    /**
     * Accept a presentation as prover by sending an accept presentation message
     * to the connection associated with the proof record.
     *
     * @param proofRecordId
     * @returns ProofRecord
     */
    acceptPresentation(proofRecordId: string, notFoundError: TsoaResponse<404, {
        reason: string;
    }>, internalServerError: TsoaResponse<500, {
        message: string;
    }>): Promise<any>;
}
