import type { AutoAcceptProof, BasicMessageRole, CredentialState, DidExchangeRole, DidExchangeState, OutOfBandInvitationOptions, OutOfBandRecordProps, ProofRecordProps, ProofState, OutOfBandRole, OutOfBandState } from '@aries-framework/core';
/**
 * @example "821f9b26-ad04-4f56-89b6-e2ef9c72b36e"
 */
export declare type RecordId = string;
/**
 * @example "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
 */
export declare type Did = string;
/**
 * @example "1.0.0"
 */
export declare type Version = string;
/**
 * @example "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
 */
export declare type CredentialDefinitionId = string;
/**
 * @example "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
 */
export declare type SchemaId = string;
export declare const BasicMessageRecordExample: {
    _tags: {
        role: string;
        connectionId: string;
    };
    metadata: {};
    id: string;
    createdAt: Date;
    content: string;
    sentTime: string;
    connectionId: string;
    role: BasicMessageRole;
};
export declare const ConnectionRecordExample: {
    _tags: {
        invitationDid: string;
        did: string;
        state: DidExchangeState;
        invitationKey: string;
        outOfBandId: string;
        verkey: string;
        role: DidExchangeRole;
    };
    metadata: {};
    id: string;
    createdAt: Date;
    did: string;
    state: DidExchangeState;
    role: DidExchangeRole;
    invitationDid: string;
    outOfBandId: string;
};
export declare const DidRecordExample: {
    didDocument: {
        '@context': string[];
        id: string;
        alsoKnownAs: undefined;
        controller: undefined;
        verificationMethod: {
            id: string;
            type: string;
            controller: string;
            publicKeyBase58: string;
        }[];
        authentication: string[];
        assertionMethod: string[];
        capabilityInvocation: string[];
        capabilityDelegation: string[];
        keyAgreement: {
            id: string;
            type: string;
            controller: string;
            publicKeyBase58: string;
        }[];
        service: undefined;
    };
    didDocumentMetadata: {};
    didResolutionMetadata: {
        contentType: string;
    };
};
declare type OutOfBandRecordProperties = Omit<OutOfBandRecordProps, 'outOfBandInvitation'>;
export declare type OutOfBandInvitationProps = Omit<OutOfBandInvitationOptions, 'handshakeProtocols' | 'services' | 'appendedAttachments'>;
export interface OutOfBandRecordWithInvitationProps extends OutOfBandRecordProperties {
    outOfBandInvitation: OutOfBandInvitationProps;
}
export declare const outOfBandInvitationExample: {
    '@type': string;
    '@id': string;
    label: string;
    accept: string[];
    handshake_protocols: string[];
    services: {
        id: string;
        serviceEndpoint: string;
        type: string;
        recipientKeys: string[];
        routingKeys: never[];
    }[];
};
export declare const outOfBandRecordExample: {
    _tags: {
        invitationId: string;
        state: string;
        role: string;
        recipientKeyFingerprints: string[];
    };
    outOfBandInvitation: {
        '@type': string;
        '@id': string;
        label: string;
        accept: string[];
        handshake_protocols: string[];
        services: {
            id: string;
            serviceEndpoint: string;
            type: string;
            recipientKeys: string[];
            routingKeys: never[];
        }[];
    };
    metadata: {};
    id: string;
    createdAt: Date;
    role: OutOfBandRole;
    state: OutOfBandState;
    reusable: boolean;
};
export declare const CredentialExchangeRecordExample: {
    _tags: {
        state: string;
        threadId: string;
        connectionId: string;
    };
    metadata: {
        '_internal/indyCredential': {
            credentialDefinitionId: string;
            schemaId: string;
        };
    };
    credentials: never[];
    id: string;
    createdAt: Date;
    state: CredentialState;
    connectionId: string;
    threadId: string;
    credentialAttributes: never[];
    protocolVersion: string;
};
export declare const ProofRecordExample: {
    _tags: ProofRecordProps;
    metadata: {};
    id: string;
    createdAt: Date;
    state: ProofState;
    connectionId: string;
    threadId: string;
    autoAcceptProof: AutoAcceptProof;
};
export declare const SchemaExample: {
    ver: string;
    id: string;
    name: string;
    version: string;
    attrNames: string[];
    seqNo: number;
};
export declare const CredentialDefinitionExample: {
    ver: string;
    id: string;
    schemaId: string;
    type: string;
    tag: string;
    value: {
        primary: {
            n: string;
            s: string;
            r: {
                master_secret: string;
                string: string;
            };
            rctxt: string;
            z: string;
        };
        revocation: {
            g: string;
            g_dash: string;
            h: string;
            h0: string;
            h1: string;
            h2: string;
            htilde: string;
            h_cap: string;
            u: string;
            pk: string;
            y: string;
        };
    };
};
export {};
