"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupAgent = exports.genesisPath = void 0;
const core_1 = require("@aries-framework/core");
const node_1 = require("@aries-framework/node");
const path_1 = __importDefault(require("path"));
const logger_1 = require("./logger");
const util_1 = require("./util");
exports.genesisPath = process.env.GENESIS_TXN_PATH
    ? path_1.default.resolve(process.env.GENESIS_TXN_PATH)
    : path_1.default.join(__dirname, '../../../../network/genesis/local-genesis.txn');
const setupAgent = async ({ name, publicDidSeed, endpoints, port, }) => {
    const logger = new logger_1.TsLogger(core_1.LogLevel.debug);
    const agent = new core_1.Agent({
        publicDidSeed,
        label: name,
        endpoints: endpoints,
        autoAcceptConnections: true,
        autoAcceptProofs: core_1.AutoAcceptProof.ContentApproved,
        autoAcceptCredentials: core_1.AutoAcceptCredential.ContentApproved,
        walletConfig: { id: name, key: name },
        useLegacyDidSovPrefix: true,
        logger: logger,
        indyLedgers: [
            {
                id: `TestLedger-${core_1.utils.uuid()}`,
                genesisTransactions: util_1.BCOVRIN_TEST_GENESIS,
                isProduction: false,
            },
        ],
    }, node_1.agentDependencies);
    const httpInbound = new node_1.HttpInboundTransport({
        port: port,
    });
    agent.registerInboundTransport(httpInbound);
    agent.registerOutboundTransport(new core_1.HttpOutboundTransport());
    httpInbound.app.get('/invitation', async (req, res) => {
        if (typeof req.query.d_m === 'string') {
            const invitation = await core_1.ConnectionInvitationMessage.fromUrl(req.url.replace('d_m=', 'c_i='));
            res.send(invitation.toJSON());
        }
        if (typeof req.query.c_i === 'string') {
            const invitation = await core_1.ConnectionInvitationMessage.fromUrl(req.url);
            res.send(invitation.toJSON());
        }
        else {
            const { outOfBandInvitation } = await agent.oob.createInvitation();
            res.send(outOfBandInvitation.toUrl({ domain: endpoints + '/invitation' }));
        }
    });
    await agent.initialize();
    return agent;
};
exports.setupAgent = setupAgent;
//# sourceMappingURL=agent.js.map